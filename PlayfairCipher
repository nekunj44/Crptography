import numpy as np

# Function to generate the Playfair cipher key matrix
def generate_key_matrix(key):
    key = key.upper().replace("J", "I")  # Convert to uppercase & replace 'J' with 'I'
    key = "".join(dict.fromkeys(key))  # Remove duplicates while maintaining order
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    
    matrix_string = key + "".join([ch for ch in alphabet if ch not in key])
    matrix = np.array(list(matrix_string)).reshape(5, 5)
    
    return matrix

# Function to format plaintext into digraphs (pairs of letters)
def prepare_text(plaintext):
    plaintext = plaintext.upper().replace("J", "I")  # Replace 'J' with 'I'
    plaintext = "".join([ch for ch in plaintext if ch.isalpha()])  # Remove non-alphabet characters
    
    digraphs = []
    i = 0
    while i < len(plaintext):
        if i == len(plaintext) - 1:  # If last letter is alone, add 'X'
            digraphs.append(plaintext[i] + 'X')
            i += 1
        elif plaintext[i] == plaintext[i + 1]:  # If duplicate letters, insert 'X'
            digraphs.append(plaintext[i] + 'X')
            i += 1
        else:
            digraphs.append(plaintext[i] + plaintext[i + 1])
            i += 2
    
    return digraphs

# Function to find letter positions in the key matrix
def find_position(letter, matrix):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == letter:
                return row, col
    return None

# Function to encrypt text using Playfair Cipher
def playfair_encrypt(plaintext, key):
    matrix = generate_key_matrix(key)
    digraphs = prepare_text(plaintext)
    ciphertext = ""
    
    for pair in digraphs:
        row1, col1 = find_position(pair[0], matrix)
        row2, col2 = find_position(pair[1], matrix)

        # Rule 1: Same row → Shift right
        if row1 == row2:
            ciphertext += matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
        # Rule 2: Same column → Shift down
        elif col1 == col2:
            ciphertext += matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
        # Rule 3: Rectangle rule → Swap columns
        else:
            ciphertext += matrix[row1][col2] + matrix[row2][col1]
    
    return ciphertext

# Function to decrypt text using Playfair Cipher
def playfair_decrypt(ciphertext, key):
    matrix = generate_key_matrix(key)
    digraphs = [ciphertext[i:i+2] for i in range(0, len(ciphertext), 2)]
    plaintext = ""
    
    for pair in digraphs:
        row1, col1 = find_position(pair[0], matrix)
        row2, col2 = find_position(pair[1], matrix)

        # Rule 1: Same row → Shift left
        if row1 == row2:
            plaintext += matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]
        # Rule 2: Same column → Shift up
        elif col1 == col2:
            plaintext += matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]
        # Rule 3: Rectangle rule → Swap columns
        else:
            plaintext += matrix[row1][col2] + matrix[row2][col1]
    
    return plaintext

# Example usage
key = "PLAYFAIR"
plaintext = "HELLO WORLD"

# Encrypt
ciphertext = playfair_encrypt(plaintext, key)
print("Encrypted:", ciphertext)

# Decrypt
decrypted_text = playfair_decrypt(ciphertext, key)
print("Decrypted:", decrypted_text)
